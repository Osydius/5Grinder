<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bullet_id = 0;
bullet_x = 0;
bullet_y = 0;
bullet_direction = 0;
bullet_damage = 0;
bullet_team = "";

bullet_destination_x = 0;
bullet_destination_y = 0;

bullet_speed = 8;
bullet_angle = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// change direction of player
player_direction = point_direction(bullet_x,bullet_y,bullet_destination_x,bullet_destination_y) - 90;

// move the player
adjacent = abs(bullet_x - bullet_destination_x);
opposite = abs(bullet_y - bullet_destination_y);

if(adjacent != 0){
    bullet_angle = arctan(opposite/adjacent);
} else {
    bullet_angle = 0;
}
ratio_x = floor(cos(bullet_angle)*bullet_speed);
ratio_y = floor(sin(player_angle)*bullet_speed);

// move the player horizontally
if bullet_x &gt; bullet_destination_x{
    repeat(ratio_x){
        if (bullet_x != bullet_destination_x) and place_free(bullet_x - 1, bullet_y){
            bullet_x -= 1
        }
    }
} else {
    repeat(ratio_x){
        if (bullet_x != bullet_destination_x)and place_free(bullet_x + 1, bullet_y){
            bullet_x += 1
        }
    }
}

//move the player vertically
if (bullet_y &gt; bullet_destination_y){
    repeat(ratio_y){
        if (bullet_y != bullet_destination_y) and place_free(bullet_x , bullet_y - 1){
            player_y -= 1
        }
    }
} else {
    repeat(ratio_y){
        if (bullet_y != bullet_destination_y)and place_free(bullet_x , bullet_y + 1){
            bullet_y += 1
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
