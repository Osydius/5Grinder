<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// create the server
server = network_create_server(network_socket_tcp, 6510, 32)
buff = buffer_create(16384, buffer_fixed, 1);

// game information
map_width = 3200;
map_height = 3200;

// create the memory spaces
clients_sockets = ds_list_create() //this will store all players sockets, add it only in the server, it will be used for list index search
clients_name = ds_list_create() //this will store all players names
clients_x = ds_list_create() //this will store all players x pos
clients_y = ds_list_create() //this will store all players y pos
clients_health = ds_list_create() // this will store all the players health
clients_team = ds_list_create() // this will store all the players teams
clients_captain = ds_list_create()
clients_ship = ds_list_create()
clients_direction = ds_list_create()

// create weapon lists
bullet_speed = 5
bullets = ds_map_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// send client status info
client_count = ds_list_size(clients_sockets);
if client_count&gt;0{
    sendAllClientStatus(buff, client_count);
}

// send bullet info
bullet_count = ds_map_size(bullets);
if bullet_count &gt; 0 {
    sendAllBullets(buff, bullet_count);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// update bullets
total_bullets = ds_map_size(bullets);
if total_bullets&gt;0 {
    bullet_key = ds_map_find_first(bullets);
    for(i=0;i&lt;total_bullets;i++){
        // get current bullet info
        bullet = ds_map_find_value(bullets,bullet_key);
        bullet_x = ds_map_find_value(bullet,"x");
        bullet_y = ds_map_find_value(bullet,"y");
        bullet_direction = ds_map_find_value(bullet,"direction");
        
        //check it isnt off the room
        if bullet_x &lt; 0 || bullet_x &gt; map_width || bullet_y &lt; 0 || bullet_y &gt; map_height{
            ds_map_destroy(bullet);
            ds_map_delete(bullets,bullet_key);
        } else {
            // calculate movement
            bullet_new_x = bullet_speed * cos(degtorad(bullet_direction));
            bullet_new_y = bullet_speed * sin(degtorad(bullet_direction));
            
            // update bullet info
            if ds_map_exists(bullet,"id"){
                ds_map_replace(bullet,"x",bullet_x + bullet_new_x);
                ds_map_replace(bullet,"y",bullet_y + bullet_new_y);
            }
            
            // get next bullet
            
        }
        
        bullet_key = ds_map_find_next(bullets,bullet_key);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//step event
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>eventid = ds_map_find_value(async_load, "id")
if server = eventid
    {
    //disconnect of a client
    t = ds_map_find_value(async_load, "type");
    sock = ds_map_find_value(async_load, "socket");


    if( t!=network_type_connect)
        {
        index=ds_list_find_index( clients_sockets, sock)
        //show_message(ds_list_find_value(clients_name, index)+" disconected")
        ds_list_delete(clients_sockets,index)
        ds_list_delete(clients_name, index)//name
        ds_list_delete(clients_x, index )//x
        ds_list_delete(clients_y, index )//y
        }
    }
else
    {
    net_buff = ds_map_find_value(async_load, "buffer")
    buff_info = buffer_read(net_buff , buffer_string ) 
    sock = ds_map_find_value(async_load, "id")
    
    if buff_info="client_status"{
        readClientStatus(net_buff, sock);
        
    } else if buff_info="client_create_bullet"{
        readClientCreateBullet(net_buff, sock);
            
    } else if buff_info="get_teams" {
        sendTeams(net_buff, sock);
        
    } else if buff_info="client_destroy_bullet"{
        readClientDestroyBullet(net_buff, sock);
    
    } else if buff_info="check_name"//check if name exists
        {
        b_name=buffer_read(net_buff , buffer_string )
        count=ds_list_size(clients_name)
        name_exists=0
        for(i=0;i&lt;count;i++)
            {
            if b_name=ds_list_find_value(clients_name, i) name_exists=1
            }
        buffer_seek(buff, buffer_seek_start, 0)   
        buffer_write(buff, buffer_string, "name_exists")
        buffer_write(buff, buffer_bool, name_exists)
        var buffer_size = buffer_tell(buff);
        network_send_packet( sock, buff, buffer_size );
        }
        
        
    else if buff_info="client_setup" {
        b_name=buffer_read(net_buff , buffer_string )
        b_x=buffer_read(net_buff , buffer_s16 )
        b_y=buffer_read(net_buff , buffer_s16 )
        b_health=buffer_read(net_buff , buffer_s16 )
        b_team=buffer_read(net_buff, buffer_string)
        b_captain=buffer_read(net_buff, buffer_string)
        b_ship=buffer_read(net_buff, buffer_string)
        ds_list_add(clients_sockets,sock)
        ds_list_add(clients_name,b_name)
        ds_list_add(clients_x,b_x)
        ds_list_add(clients_y,b_y)
        ds_list_add(clients_health,b_health)
        ds_list_add(clients_team, b_team)
        ds_list_add(clients_captain, b_captain)
        ds_list_add(clients_ship, b_ship)
        //show_message(b_name+" joined at pos x:"+string(b_x)+" y:"+string(b_y))
        //show_message("list sizes, socket="+string(ds_list_size(clients_sockets))+" name="+string(ds_list_size(clients_name))+" x="+string(ds_list_size(clients_x))+" y="+string(ds_list_size(clients_y)))
    } 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(50,50,"Name");
draw_text(150,50,"X");
draw_text(250,50,"Y");
draw_text(350,50,"Health");
draw_text(450,50,"Team");

count = ds_list_size(clients_sockets)
if count&gt;0{
    for(i=0;i&lt;count;i++){
        name=ds_list_find_value(clients_name,i)//name
        xx=ds_list_find_value(clients_x,i)//x
        yy=ds_list_find_value(clients_y,i)//y
        hhealth=ds_list_find_value(clients_health,i)//health
        tteam=ds_list_find_value(clients_team,i);
        
        draw_at_height = 100+(50*i);
        draw_text(50,draw_at_height,name);
        draw_text(150,draw_at_height,xx);
        draw_text(250,draw_at_height,yy);
        draw_text(350,draw_at_height,hhealth);
        draw_text(450,draw_at_height,tteam);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
