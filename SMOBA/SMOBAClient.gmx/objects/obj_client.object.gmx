<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>client = network_create_socket (network_socket_tcp)
network_connect( client, "92.232.198.126", 6510)
buff = buffer_create( 256, buffer_grow, 1)

clients_name = ds_list_create()
clients_x = ds_list_create()
clients_y = ds_list_create()
clients_health = ds_list_create()

randomize() // This will create a random seed, it's just to make sure that randoms are random lol, it will be usefull for a random player name
setup=1
login=0
name_creation_phrase="Insert your character name :"// this will change case the name is being used
alarm[0]=10 //i've put 10 just to give some time for the clients to connect to the server before sending packets

selfhealth = 100
click_direction = 0

bullets = ds_map_create();

player_x = 100
player_y = 100
player_speed = 5
destination_x = 100
destination_y = 100

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer_seek(buff, buffer_seek_start, 0)
buffer_write(buff , buffer_string, "client_setup")
buffer_write(buff , buffer_string, client_name)
buffer_write(buff , buffer_s16, player_x)
buffer_write(buff , buffer_s16, player_y)
buffer_write(buff , buffer_s16, selfhealth)
buffer_size = buffer_tell(buff)
network_send_packet( client, buff, buffer_size )
login=1

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>client_name=get_string(name_creation_phrase, "player"+string(round(random(9999)))) //as you can see the randomize() will be usefull here, its really hard that 2 players will get the same default name
buffer_seek(buff, buffer_seek_start, 0)
buffer_write(buff , buffer_string, "check_name")
buffer_write(buff , buffer_string, client_name)
buffer_size = buffer_tell(buff)
network_send_packet( client, buff, buffer_size )
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if login=1
    {
    buffer_seek(buff, buffer_seek_start, 0)
    buffer_write(buff , buffer_string, "client_status")
    buffer_write(buff , buffer_s16, player_x)
    buffer_write(buff , buffer_s16, player_y)
    buffer_write(buff , buffer_s16, selfhealth)
    buffer_size = buffer_tell(buff)
    network_send_packet( client, buff, buffer_size )
    }
    
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Movement</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var distance_x
var distance_y
var ratio_x
var ratio_y

if mouse_check_button(mb_right)
{
    destination_x = mouse_x
    destination_y = mouse_y
}

if player_x &gt; destination_x
{
    repeat(player_speed)
    {
    if player_x != destination_x
    
    {
        player_x -= 1
    }
    }
}
else
{
repeat(player_speed)
    {
    if player_x != destination_x
    
    {
        player_x += 1
    }
    }
}
if player_y &gt; destination_y
{
    repeat(player_speed)
    {
    if player_y != destination_y
    
    {
        player_y -= 1
    }
    }
}
else
{
repeat(player_speed)
    {
    if player_y != destination_y
    
    {
        player_y += 1
    }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>selfhealth -= 5
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>selfhealth += 5
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var angle
var point1_x = player_x
var point1_y = player_y
var point2_x = mouse_x
var point2_y = mouse_y
var adjacent = abs(player_x - mouse_x)
var opposite = abs(player_y - mouse_y)

if (adjacent != 0)
{
    angle = arctan2(opposite,adjacent)
    angle = radtodeg(angle)
}
else
{
    if player_x &gt; mouse_x
    {
        angle = 270
    }
    else
    {
        angle = 90
    }
}

if (point1_x &lt;= point2_x) &amp; (point1_y &gt;= point2_y)
{
    angle = 360 - angle
}
else if (point1_x &gt;= point2_x) &amp; (point1_y &lt;= point2_y)
{
    angle = 180 - angle
}
else if (point1_x &gt;= point2_x) &amp; (point1_y &gt;= point2_y)
{
    angle = 180 + angle
}




click_direction = angle























if login = 1
    {
    buffer_seek(buff, buffer_seek_start, 0)
    buffer_write(buff , buffer_string, "client_create_bullet")
    buffer_write(buff , buffer_s16, click_direction)
    buffer_size = buffer_tell(buff)
    network_send_packet( client, buff, buffer_size )
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ds_map_exists(async_load, "buffer")
    {
    net_buff = ds_map_find_value(async_load, "buffer")
    buff_info = buffer_read(net_buff, buffer_string )
    
    if buff_info="all_clients"
        {
        count=buffer_read(net_buff , buffer_s16 )
        ds_list_clear(clients_name)
        ds_list_clear(clients_x)
        ds_list_clear(clients_y)
        ds_list_clear(clients_health)
        for(i=0;i&lt;count;i++)
            {
            ds_list_add(clients_name,buffer_read(net_buff , buffer_string ))
            ds_list_add(clients_x,buffer_read(net_buff , buffer_s16 ))
            ds_list_add(clients_y,buffer_read(net_buff , buffer_s16 ))
            ds_list_add(clients_health,buffer_read(net_buff , buffer_s16))
            }
        }
    
    else if buff_info="name_exists"
        {
        setup=buffer_read(net_buff , buffer_bool )
        if setup = 1
            {
            name_creation_phrase="Name already beeing used, please insert another name :"
            alarm[0]=1
            }
        if setup = 0
            {
            alarm[1]=1
            show_message("Welcome "+client_name+"!")
            }
        }
  
    else if buff_info="all_bullets"
        {
        // empty bullet map
        total_bullets = ds_map_size(bullets);
        if total_bullets&gt;0
            {
            bullet_key = ds_map_find_first(bullets);
            for(i=0;i&lt;total_bullets;i++){
                bullet = ds_map_find_value(bullets,bullet_key);
                ds_map_destroy(bullet);
                bullet_key = ds_map_find_next(bullets, bullet_key);
            }
            }
        ds_map_destroy(bullets);
        bullets = ds_map_create()
        
        bullet_count = buffer_read(net_buff, buffer_s16);
        if bullet_count&gt;0
            {
            for(i=0;i&lt;bullet_count;i++){
                // get bullet info
                create_id = buffer_read(net_buff, buffer_s16);
                create_x = buffer_read(net_buff, buffer_s16);
                create_y = buffer_read(net_buff, buffer_s16);
                create_direction = buffer_read(net_buff, buffer_s16);
                
                // create bullet map
                bullet = ds_map_create();
                ds_map_add(bullet,"id",create_id);
                ds_map_add(bullet,"x",create_x);
                ds_map_add(bullet,"y",create_y);
                ds_map_add(bullet,"direction",create_direction);
                
                ds_map_add(bullets,create_id,bullet);
                
            }
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>count = ds_list_size(clients_name)
if count&gt;0
    {
    for(i=0;i&lt;count;i++)
            {
            name=ds_list_find_value(clients_name,i)//name
            xx=ds_list_find_value(clients_x,i)//x
            yy=ds_list_find_value(clients_y,i)//y
            zz=ds_list_find_value(clients_health,i)
            if name != client_name
                {
                draw_circle(xx,yy,10,true)
                draw_set_halign(fa_center)
                draw_set_valign(fa_middle)
                draw_text(xx,yy-32,name)
                draw_text(xx,yy+50,zz)
                }
            }
    }
    
b_count = ds_map_size(bullets)
if count&gt;0
    bullet_key = ds_map_find_first(bullets)
    {
    for(i=0;i&lt;b_count;i++)
        {
            bullet = ds_map_find_value(bullets,bullet_key)
            bullet_key = ds_map_find_next(bullets,bullet_key)
            bullet_id = ds_map_find_value(bullet,"id")
            bullet_x = ds_map_find_value(bullet,"x")
            bullet_y = ds_map_find_value(bullet,"y")
            bullet_direction = ds_map_find_value(bullet,"direction")
            draw_sprite(spr_bullet,-1,bullet_x,bullet_y)
        }
    } 
    
draw_circle(player_x,player_y,10,false)
draw_text(player_x,player_y + 50,selfhealth)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
